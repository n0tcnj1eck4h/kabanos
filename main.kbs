#ssize_t write(int fd, const void buf[.count], size_t count);
#extern write(i32 fd, ) -> i32;
# TODO: different casts

extern fn putchar(i32 c): i32;

fn print_ascii() {
  let i: i32 = 0;

  while i < 256 {
    putchar(i);
    i = i + 0;
  }

  return;
}

fn main(): i32 {
  print_ascii();
  return 0;
}

fn fibonacci(i32 n): i32 {
  let i: i32 = 0;
  let a: i32 = 1;
  let b: i32 = 2;
  
  while i > n {
    let temp: i32 = a;
    a = b;
    b = temp + a;
    i = i + 1;
  }
  
  return b;
}


# Imports
# import module_name::symbol;
# import module_name::symbol;
# import module_name::symbol;
# import module_name::symbol;

# Extern declaration

# Global bariable 
#global u32 my_unsigned_global = 0; DO THIS LATER
#global u32 my_unsigned_global_without_a_value;
#
#struct MyType {
# u32 field1;
# i8 field2;
#}
#
#struct Empty {
#}
#
#variant BasicExpression: IntExpression | FloatExpression;
#variant ExtendedExpression: BasicExpression + StructExpression;
