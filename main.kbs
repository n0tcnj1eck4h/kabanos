extern fn putchar(i32 c): i32;

fn main(): i32 {
  putchar('h');
  return 2 + 1;
}

fn print_ascii(): i32 {
  let i: i32 = 0;

  while i < 256 {
    putchar(i);
    i = i + 1;
  }

  return 0;
}

#fn print_i32(i32 n) {
#  putchar(n / 1000 % 10 + 48);
#  putchar(n / 100  % 10 + 48);
#  putchar(n / 10   % 10 + 48);
#  putchar(n        % 10 + 48);
#  return;
#}

#fn fibonacci(i32 n): i32 {
#  let i: i32 = 0 as i32;
#  let a: i32 = i;
#  let b: i32 = 2 as i32;
#  
#  while i < n {
#    putchar(10);
#    print_i32(a);
#
#    let c: i32 = a + b;
#    a = b;
#    b = c;
#    i = i + 1;
#  }
#  
#  return b;
#}


# Imports
# import module_name::symbol;
# import module_name::symbol;
# import module_name::symbol;
# import module_name::symbol;

# Extern declaration

# Global bariable 
#global u32 my_unsigned_global = 0; DO THIS LATER
#global u32 my_unsigned_global_without_a_value;
#
#struct MyType {
# u32 field1;
# i8 field2;
#}
#
#struct Empty {
#}
#

#variant BasicExpression: IntExpression | FloatExpression;
#variant ExtendedExpression: BasicExpression + StructExpression;
