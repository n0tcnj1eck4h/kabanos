use std::str::FromStr;

use super::error::SemanticError;

#[derive(Debug, Clone, Copy)]
pub enum Primitive {
    Bool,
    I8,
    I16,
    I32,
    I64,
    U8,
    U16,
    U32,
    U64,
    F32,
    F64,
}

impl FromStr for Primitive {
    type Err = SemanticError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "bool" => Ok(Self::Bool),
            "i8" => Ok(Self::I8),
            "i16" => Ok(Self::I16),
            "i32" => Ok(Self::I32),
            "i64" => Ok(Self::I64),
            "u8" => Ok(Self::U8),
            "u16" => Ok(Self::U16),
            "u32" => Ok(Self::U32),
            "u64" => Ok(Self::U64),
            "f32" => Ok(Self::F32),
            "f64" => Ok(Self::F64),
            _ => Err(SemanticError::NotPrimitive(s.to_string())),
        }
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct IntType {
    pub bit_width: u8,
    pub signed: bool,
}

#[derive(Debug, Clone, PartialEq)]
pub struct FloatType {
    pub bit_width: u8,
}

#[derive(Debug, Clone, PartialEq)]
pub enum TypeEnum {
    Int(IntType),
    Float(FloatType),
    Ptr(Box<TypeEnum>),
}

impl From<IntType> for TypeEnum {
    fn from(value: IntType) -> Self {
        Self::Int(value)
    }
}

impl From<FloatType> for TypeEnum {
    fn from(value: FloatType) -> Self {
        Self::Float(value)
    }
}
impl From<Primitive> for TypeEnum {
    fn from(value: Primitive) -> Self {
        use TypeEnum::*;
        match value {
            Primitive::Bool => Int(IntType {
                bit_width: 1,
                signed: false,
            }),
            Primitive::I8 => Int(IntType {
                bit_width: 8,
                signed: true,
            }),
            Primitive::I16 => Int(IntType {
                bit_width: 16,
                signed: true,
            }),
            Primitive::I32 => Int(IntType {
                bit_width: 32,
                signed: true,
            }),
            Primitive::I64 => Int(IntType {
                bit_width: 64,
                signed: true,
            }),
            Primitive::U8 => Int(IntType {
                bit_width: 8,
                signed: false,
            }),
            Primitive::U16 => Int(IntType {
                bit_width: 16,
                signed: false,
            }),
            Primitive::U32 => Int(IntType {
                bit_width: 32,
                signed: false,
            }),
            Primitive::U64 => Int(IntType {
                bit_width: 64,
                signed: false,
            }),
            Primitive::F32 => Float(FloatType { bit_width: 32 }),
            Primitive::F64 => Float(FloatType { bit_width: 64 }),
        }
    }
}
